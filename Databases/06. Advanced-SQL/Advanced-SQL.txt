===================================================================================================
01. Write a SQL query to find the names and salaries of the employees that take the minimal salary in the company. 
Use a nested SELECT statement.

SELECT TOP 20 MIN(Salary), FirstName, LastName FROM (
SELECT e.FirstName, e.LastName, e.Salary FROM Employees AS e
) AS MinSalary
GROUP BY Salary, FirstName, LastName
===================================================================================================

===================================================================================================
02. Write a SQL query to find the names and salaries of the employees that have a salary that is up to 10% higher 
than the minimal salary for the company.

SELECT e.FirstName, e.LastName, e.Salary FROM Employees e
WHERE e.Salary >
(SELECT MIN(Salary) FROM Employees) + (SELECT MIN(Salary) FROM Employees) * 0.1
ORDER BY e.Salary
===================================================================================================

===================================================================================================
03. Write a SQL query to find the full name, salary and department of the employees that take the minimal salary in their department.
Use a nested SELECT statement.

SELECT MIN(e.FirstName + ' ' + e.LastName) AS FullName, e.Salary, d.Name, d.DepartmentID
FROM Employees e
JOIN Departments AS d ON e.DepartmentID = d.DepartmentID
WHERE Salary = 
	(SELECT MIN(Salary) FROM Employees WHERE DepartmentID = e.DepartmentID)
GROUP BY e.Salary, d.Name, d.DepartmentID
ORDER BY e.Salary ASC

===================================================================================================

===================================================================================================
04. Write a SQL query to find the average salary in the department #1.

SELECT AVG(Salary) As AverageSalary FROM Employees
WHERE DepartmentID = 1
===================================================================================================

===================================================================================================
05. Write a SQL query to find the average salary  in the "Sales" department.

SELECT AVG(e.Salary) As AverageSalary FROM Employees AS e
JOIN Departments AS d ON e.DepartmentID = d.DepartmentID
WHERE d.Name = 'Sales'
===================================================================================================

===================================================================================================
06. Write a SQL query to find the number of employees in the "Sales" department.

SELECT COUNT(e.EmployeeID) AS TotalEmployee FROM Employees AS e
JOIN Departments AS d ON e.DepartmentID = d.DepartmentID
WHERE d.Name = 'Sales'
===================================================================================================

===================================================================================================
07. Write a SQL query to find the number of all employees that have manager.

SELECT COUNT(EmployeeID) FROM Employees
WHERE ManagerID IS NOT NULL
===================================================================================================

===================================================================================================
08. Write a SQL query to find the number of all employees that have no manager.

SELECT COUNT(EmployeeID) FROM Employees
WHERE ManagerID IS NULL
===================================================================================================

===================================================================================================
09. Write a SQL query to find all departments and the average salary for each of them.

SELECT d.Name, AVG(e.Salary) AS AverageSalary
FROM Departments d 
JOIN Employees e ON d.DepartmentID = e.DepartmentID
GROUP BY d.Name
===================================================================================================

===================================================================================================
10. Write a SQL query to find the count of all employees in each department and for each town.

SELECT t.Name AS TownName, d.Name, COUNT(*) AS TotalEmployees
FROM Employees AS e JOIN Addresses AS a
ON e.AddressID = a.AddressID
JOIN Towns AS t
ON a.TownID = t.TownID
JOIN Departments AS d
ON e.DepartmentID = d.DepartmentID
GROUP BY d.Name, t.Name
ORDER BY TownName ASC, TotalEmployees DESC
===================================================================================================

===================================================================================================
11. Write a SQL query to find all managers that have exactly 5 employees. Display their first name and last name.

SELECT m.FirstName + ' ' + m.LastName AS FullName,
COUNT(*) as [Count]
FROM Employees as e JOIN Employees as m
ON e.ManagerID = m.EmployeeID
GROUP BY m.FirstName + ' ' + m.LastName
HAVING COUNT(*) = 5
===================================================================================================

===================================================================================================
12. Write a SQL query to find all employees along with their managers. 
For employees that do not have manager display the value "(no manager)".

SELECT e.FirstName + ' ' + e.LastName AS [Employee Name],
COALESCE(m.FirstName + ' ' + m.LastName, '(no manager)') AS [Manager Name]
FROM Employees as e LEFT JOIN Employees as m
 ON e.ManagerID = m.EmployeeID
===================================================================================================

===================================================================================================
13. Write a SQL query to find the names of all employees whose last name is exactly 5 characters long. 
Use the built-in LEN(str) function.

SELECT FirstName, LastName FROM Employees
WHERE LEN(LastName) = 5
===================================================================================================

===================================================================================================
14. Write a SQL query to display the current date and time in the following format "day.month.year hour:minutes:seconds:milliseconds".
Search in  Google to find how to format dates in SQL Server.

SELECT FORMAT(GETDATE(), 'dd.MM.yyyy HH:mm:ss:fff');
===================================================================================================

===================================================================================================
15. Write a SQL statement to create a table Users. Users should have username, password, full name and last login time. 
Choose appropriate data types for the table fields. Define a primary key column with a primary key constraint. 
Define the primary key column as identity to facilitate inserting records. 
Define unique constraint to avoid repeating usernames. Define a check constraint to ensure the password is at least 5 characters long.

CREATE TABLE Users (
	UserID INT NOT NULL identity(1,1) PRIMARY KEY,
	Userame nvarchar(20) NOT NULL UNIQUE,
	Password nvarchar(40) NOT NULL CHECK(LEN(Password) >= 5),
	FullName nvarchar(100) NOT NULL,
	LastLogin datetime
);
===================================================================================================

===================================================================================================
16. Write a SQL statement to create a view that displays the users from the Users table that have been in the system today. 
Test if the view works correctly.

CREATE VIEW UsersLoggedToday AS
SELECT FullName, LastLogin FROM Users
WHERE DAY(LastLogin) = DAY(GETDATE()) AND YEAR(LastLogin) = YEAR(GETDATE())
===================================================================================================

===================================================================================================
17. Write a SQL statement to create a table Groups. Groups should have unique name (use unique constraint). 
Define primary key and identity column.

CREATE TABLE Groups (
    GroupId INT IDENTITY(1,1) PRIMARY KEY,
	Name NVARCHAR(50) NOT NULL UNIQUE
);
===================================================================================================

===================================================================================================
18. Write a SQL statement to add a column GroupID to the table Users. 
Fill some data in this new column and as well in the Groups table. 
Write a SQL statement to add a foreign key constraint between tables Users and Groups tables.

ALTER TABLE Users
ADD GroupId INT FOREIGN KEY REFERENCES Groups(GroupId);
===================================================================================================

===================================================================================================
19. Write SQL statements to insert several records in the Users and Groups tables.

INSERT Users VALUES ('asd', 'asdasd', 'asd', GETDATE(), 1);
INSERT Users VALUES ('asdf', 'asdasd', 'asdf', GETDATE(), 2);
===================================================================================================

===================================================================================================
20. Write SQL statements to update some of the records in the Users and Groups tables.

UPDATE Groups SET Name = Name + ' new';
UPDATE Users SET FullName = REVERSE(FullName);
===================================================================================================

===================================================================================================
21. Write SQL statements to delete some of the records from the Users and Groups tables.

DELETE FROM Users WHERE UserID = 1;
DELETE FROM Groups WHERE GroupId = 2;
===================================================================================================

===================================================================================================
22. Write SQL statements to insert in the Users table the names of all employees from the Employees table. 
Combine the first and last names as a full name. For username use the first letter of the first name + the last name (in lowercase). 
Use the same for the password, and NULL for last login time.

BEGIN TRAN

SELECT
	LOWER(LEFT(FirstName, 1) + LastName) + CONVERT(nvarchar(5), ROW_NUMBER() OVER(ORDER BY FirstName)) AS UserName,
	FirstName + ' ' + LastName AS FullName
INTO #TempUsers
FROM Employees;

INSERT Users
SELECT UserName, UserName + REPLACE(ISNULL(SPACE(5 - LEN(UserName)),''), ' ', '*'), FullName, NULL, NULL
FROM #TempUsers;

DROP TABLE #TempUsers;

GO
===================================================================================================

===================================================================================================
23 Write a SQL statement that changes the password to NULL for all users that have not been in the system since 10.03.2010.

INSERT Users VALUES ('DealWithIt', 'obamination', 'Barack Obama', CONVERT(DATE, '09.03.2010', 104));

UPDATE Users SET Password = NULL
WHERE LastLogin < CONVERT(DATE, '10.03.2010', 104);
===================================================================================================

===================================================================================================
24 Write a SQL statement that deletes all users without passwords (NULL password).

DELETE FROM Users
WHERE Password IS NULL;
===================================================================================================

===================================================================================================
25 Write a SQL query to display the average employee salary by department and job title.

SELECT d.Name, e.JobTitle, AVG(e.Salary)
FROM Employees e JOIN Departments d ON e.DepartmentId = d.DepartmentId
GROUP BY d.DepartmentId, d.Name, e.JobTitle;
===================================================================================================

===================================================================================================
26 Write a SQL query to display the minimal employee salary by department and job title along with the name of some of the 
employees that take it.

SELECT e.Salary, e.LastName, d.Name
FROM Employees e JOIN Departments d ON e.DepartmentId = d.DepartmentId
WHERE e.Salary = 
(
	SELECT MIN(Salary)
	FROM Employees
	WHERE DepartmentId = e.DepartmentId
);
===================================================================================================

===================================================================================================
27 Write a SQL query to display the town where maximal number of employees work.

SELECT TOP(1) t.Name
FROM Employees e
JOIN Addresses a ON e.AddressId = a.AddressId
JOIN Towns t ON t.TownId = a.TownId
GROUP BY t.TownId, t.Name
ORDER BY COUNT(*) DESC;
===================================================================================================

===================================================================================================
-- 28 Write a SQL query to display the number of managers from each town.

SELECT t.Name, COUNT(*)
FROM Employees e
JOIN Addresses a ON e.AddressId = a.AddressId
JOIN Towns t ON t.TownId = a.TownId
WHERE e.ManagerId IS NOT NULL
GROUP BY t.TownId, t.Name;
===================================================================================================

===================================================================================================
29 Write a SQL to create table WorkHours to store work reports for each employee (employee id, date, task, hours, comments). 
Don't forget to define identity, primary key and appropriate foreign key.
Issue few SQL statements to insert, update and delete of some data in the table.
Define a table WorkHoursLogs to track all changes in the WorkHours table with triggers. 
For each change keep the old record data, the new record data and the command (insert / update / delete).

CREATE TABLE WorkHours
(
Id INT IDENTITY PRIMARY KEY,
EmployeeId INT NOT NULL FOREIGN KEY REFERENCES Employees(EmployeeId),
Date_ DATE NOT NULL,
Task VARCHAR(16) NOT NULL,
Hours_ INT NOT NULL,
Comments TEXT
);
===================================================================================================

===================================================================================================
30 Start a database transaction, delete all employees from the 'Sales' department along with all dependent records from the other tables. 
At the end rollback the transaction.

BEGIN TRAN
	ALTER TABLE EmployeesProjects
	ADD CONSTRAINT FK_CASCADE_1 FOREIGN KEY (EmployeeID)
	REFERENCES Employees (EmployeeID)
ON DELETE CASCADE;

-- !!!! to run this, modify ManagerId to accept null !!!!

ALTER TABLE Departments
	ADD CONSTRAINT FK_CASCADE_2 FOREIGN KEY (ManagerId)
	REFERENCES Employees (EmployeeID)
ON DELETE SET NULL;

DELETE FROM Employees WHERE DepartmentId IN (SELECT DepartmentId FROM Departments WHERE Name = 'Sales')

ROLLBACK TRAN
GO
===================================================================================================

===================================================================================================
31 Start a database transaction and drop the table EmployeesProjects. Now how you could restore back the lost table data?

BEGIN TRAN
	CREATE DATABASE TelerikAcademy_snapshot1900
	ON (NAME = TelerikAcademy_Data, FILENAME = 'TelerikAcademy_snapshot1900.ss')
AS SNAPSHOT OF TelerikAcademy;

DROP TABLE EmployeesProjects
-- ROLLBACK TRAN
GO

BEGIN TRAN
-- kick users
ALTER DATABASE TelerikAcademy
SET SINGLE_USER WITH ROLLBACK IMMEDIATE;

-- restore database
USE master;
RESTORE DATABASE TeleikAcademy FROM DATABASE_SNAPSHOT = 'TelerikAcademy_snapshot1900';
GO
===================================================================================================

===================================================================================================
32 Find how to use temporary tables in SQL Server. 
Using temporary tables backup all records from EmployeesProjects and restore them back after dropping and re-creating the table.

BEGIN TRAN
	SELECT * INTO #TempEmployeesProjects
	FROM EmployeesProjects;

DROP TABLE EmployeesProjects;

SELECT * INTO EmployeesProjects
FROM #TempEmployeesProjects;

DROP TABLE #TempEmployeesProjects
GO
===================================================================================================